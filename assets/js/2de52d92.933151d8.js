"use strict";(self.webpackChunkgee_cryengine_DOC=self.webpackChunkgee_cryengine_DOC||[]).push([[2352],{8841:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=t(5893),i=t(1151);t(893);const o=t.p+"assets/images/ime-2fd14fcc067c8ba2f29265bed22dddf4.png",s={sidebar_position:2},a="Scaleform IMEE Support",l={id:"5.7/UserInterface/IMEEScaleformsupport",title:"Scaleform IMEE Support",description:"Copied from Crytek official Manual",source:"@site/docs/5.7/UserInterface/IMEEScaleformsupport.md",sourceDirName:"5.7/UserInterface",slug:"/5.7/UserInterface/IMEEScaleformsupport",permalink:"/GEE-Cryengine-Doc/docs/5.7/UserInterface/IMEEScaleformsupport",draft:!1,unlisted:!1,editUrl:"https://github.com/Gamer2030a/GEE-Cryengine-Doc/tree/main/docs/5.7/UserInterface/IMEEScaleformsupport.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/GEE-Cryengine-Doc/docs/5.7/Samples and Tutorials/Space Invaders/intro"},next:{title:"Scaleform GFx",permalink:"/GEE-Cryengine-Doc/docs/5.7/UserInterface/RunningDocLocally"}},c={},p=[{value:"Enabling support for IME",id:"enabling-support-for-ime",level:3},{value:"Checking for IME support",id:"checking-for-ime-support",level:3},{value:"Updating Flash files for IME support",id:"updating-flash-files-for-ime-support",level:3}];function d(e){const n={admonition:"admonition",h1:"h1",h3:"h3",p:"p",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"scaleform-imee-support",children:"Scaleform IMEE Support"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Copied from Crytek official Manual"})}),"\n",(0,r.jsx)(n.p,{children:"Some languages (such as Chinese) have on-screen helpers and various keyboard layout functions to help with text input.\r\nThis feature is supported by Scaleform as well."}),"\n",(0,r.jsx)(n.h3,{id:"enabling-support-for-ime",children:"Enabling support for IME"}),"\n",(0,r.jsx)(n.p,{children:"When building the engine from source, make sure that ENABLE_GFX_IME definition is set in ConfigScaleform.h\r\nThis will link in the Scaleform IME support library."}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Scaleform IME support library is only available for Windows."})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"For EaaS users, the engine is shipped as pre-compiled binaries. These binaries have Scaleform IME support."})}),"\n",(0,r.jsx)(n.p,{children:"At this point, IME support is available in the binaries, but it's not necessarily active.\r\nYou can edit game.cfg for your project and set the CVar: sys_ime=1"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"IME support is never available in the Sandbox, it can only be used in the game launcher."})}),"\n",(0,r.jsx)(n.h3,{id:"checking-for-ime-support",children:"Checking for IME support"}),"\n",(0,r.jsx)(n.p,{children:'To check that IME support is available, use the GameSDK sample project\'s main menu in the game launcher.\r\nBy going to "Multiplayer" and then "Host Server" menu, you have some text fields to enter text.'}),"\n",(0,r.jsx)(n.p,{children:"Depending on the current language setting of the OS, you will be presented with various options.\r\nFor example, with input language set to Chinese it should look similar to the below screenshot:"}),"\n",(0,r.jsx)("img",{src:o}),"\n",(0,r.jsx)(n.h3,{id:"updating-flash-files-for-ime-support",children:"Updating Flash files for IME support"}),"\n",(0,r.jsx)(n.p,{children:"In the GameSDK/Libs/UI/FlashAssets/cryflash folder will be a file LanguageBar.as that wraps the language bar functionality.\r\nThis allows you to easily implement support for this feature in other Flash files."}),"\n",(0,r.jsx)(n.p,{children:"The default UI framework will activate the language bar when a text field is being written to."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The IME candidate-list file has been created to import from the SDK's default font library (HUD_Font_LocFont.gfx).\r\nFrom this file it will read the Font_Body ActionScript symbol to render glyphs."})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},893:(e,n,t)=>{t.d(n,{Z:()=>i});t(7294);var r=t(5893);function i(e){let{children:n,color:t}=e;return(0,r.jsx)("span",{style:{backgroundColor:t,borderRadius:"4px",color:"#fff",padding:"0.2rem 0.5rem",fontWeight:"bold"},children:n})}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var r=t(7294);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);